#!/bin/make -f
# COPYRIGHT (C) 2004-2007 Eklectically, Inc. DBA ESLX Inc----------{{{# 
# See ESLX_LICENSE for information on legal usage of this file.   #
#######################################################################
# DESCRIPTION
#   This file, Makefile.defs, contains rules for compiling SystemC
#   under UNIX using gcc.

.PHONY: default exe run deps tar clean ultraclean

###############################################################################
# Figure out architecture info
###############################################################################
PLATFORM=$(shell uname -s)
ifeq "$(PLATFORM)" "SunOS"
  TARGET_ARCH = gccsparcOS5
endif
ifeq "$(PLATFORM)" "Linux"
  TARGET_ARCH = linux
endif
ifeq "$(PLATFORM)" "CYGWIN_NT-5.1"
  TARGET_ARCH = cygwin
endif
ifeq "$(PLATFORM)" "Darwin"
  TARGET_ARCH = macosx
endif

ifndef TARGET_ARCH
  $(error This makefile only supported on Linux, Cygwin, Darwin or SunOS. I do not recognize platform $(PLATFORM))
endif

ifndef SYSTEMC
  $(error The SYSTEMC environment variable is not set)
endif

ifndef MODULE
  $(warning Using directory name for MODULE)
  MODULE=$(dir $(shell pwd))
endif
ifndef SRCS
  $(warning Using all .cpp files for SRCS)
  SRCS = $(wildcard *.cpp)
endif
ifndef OBJS
  OBJS = $(SRCS:.cpp=.o)
endif

DEPENDENCIES = dependencies.mk
ifneq "$(shell grep systemc $(SRCS))" ""
  USE_SYSTEMC=1
  ifndef SYSTEMC
    # NOTE: In the following SYSTEMC_HOME is purely for Synopsys'
    # CoCentric System Studio, which uses a non-standard convention for
    # identifying the location of SystemC includes & libraries.
    ifdef SYSTEMC_HOME
      export SYSTEMC=$(SYSTEMC_HOME)
    else
    $(error The SYSTEMC environment variable is not set)
    endif
  endif
  ifndef SYSTEMC_HOME
    export SYSTEMC_HOME=$(SYSTEMC)
  endif
  SYSTEMC_VERSION:=$(firstword $(wildcard $(patsubst %,%/bin/systemc_version,$(subst :, ,$(PATH)))))
endif

# Following is used to ensure makefile changes are noticed. RULES is
# defined in Makefile that includes this file.
MAKE_FILES=$(firstword $(wildcard Makefile ../Makefile)) $(RULES) $(DEPENDENCIES)

###############################################################################
# Standard variables affecting compilation
###############################################################################
ifndef CXX
  CXX = g++
endif
CXXFLAGS = -O0 -Wno-deprecated -ggdb

INCDIR = -I. -I..
LIBDIR = -L. -L..
LIBS=
ifdef USE_SYSTEMC
  ifdef SYSTEMC
    ifdef SYSTEMC_VERSION
      CXXFLAGS += -D$(SYSTEMC_VERSION)
    endif
    CXXFLAGS += -DDEBUG_SYSTEMC
    INCDIR   += -I$(SYSTEMC)/include
    LIBDIR   += -L$(SYSTEMC)/lib-$(TARGET_ARCH)
    LIBS     += -lsystemc -lm
    # Support some EDA tools
    export SYSTEMC_HOME=$(SYSTEMC)
    # Forte support
    ifdef CYNTH_HOME
      INCDIR += -I$(CYNTH_HOME)/include
    endif
  endif
endif
ifdef BOOST
  INCDIR += -I$(BOOST)/include/boost
  LIBDIR += -L$(BOOST)/lib
  LIBS   += -lboost_regex
endif
# Allow for other extensions
INCDIR += $(MY_INCLUDES)
LIBDIR += $(MY_LIBS)
LIBS   += $(EXTRA_LIBS) $(BDW_EXTRA_LDFLAGS)

ifndef EXE
  EXE = $(MODULE).x
endif

###############################################################################
.SUFFIXES: .cc .cpp .o .x

define RULER
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
endef

default: version exe

version:
	$(CXX) --version
ifdef SYSTEMC_VERSION
	@echo -n "SystemC version "; $(SYSTEMC_VERSION)
endif
	@$(RULER)

run sim: $(EXE)
ifndef NORUN
	@echo $(RULER)
ifneq "$(wildcard ./$(MODULE).scr)" ""
	./$(wildcard ./$(MODULE).scr)
else
  ifneq "$(wildcard ./$(MODULE).dat)" ""
	./$(EXE) < $(wildcard ./$(MODULE).dat)
  else
	./$(EXE)
  endif
endif
else
	@echo "Executable is ready"
endif

exe: $(EXE)

deps: $(DEPENDENCIES)

###############################################################################
# Compilation
###############################################################################
$(EXE): $(OBJS) $(MAKE_FILES)
	$(CXX) $(CXXFLAGS) $(CFLAGS) $(INCDIR) $(LIBDIR) -o $@ $(OBJS) $(LIBS) 2>&1 | c++filt

.cpp.o: $(MAKE_FILES)
	$(CXX) $(CXXFLAGS) $(CFLAGS) $(INCDIR) -c $<

.cc.o: $(MAKE_FILES)
	$(CXX) $(CXXFLAGS) $(CFLAGS) $(INCDIR) -c $<

###############################################################################
# Housekeeping
###############################################################################
tar:
	tar cvjf $(MODULE).tbz $(SRCS) $(wildcard $(MODULE).scr $(MODULE).dat) $(MAKE_FILES)

clean:
	rm -f $(OBJS) *~ $(EXE) core

distclean: clean
	rm -rf $(DEPENDENCIES) Makefile.prj *.log *.vcd *.vcd.vpd *.awif *.ow vcd_autosave.sav

###############################################################################
# Dependencies
###############################################################################

$(DEPENDENCIES): $(SRCS)
	$(CC) $(CFLAGS) $(INCDIR) -M $(SRCS) >> $(DEPENDENCIES)

-include $(DEPENDENCIES)

# COPYRIGHT (C) 2004-2007 Eklectically, Inc. DBA ESLX Inc. ---------{{{
# See ESLX_LICENSE for information on legal usage of this file.   #

#END $Id: Makefile.defs,v 1.15 2004/04/08 15:40:40 dcblack Exp $
